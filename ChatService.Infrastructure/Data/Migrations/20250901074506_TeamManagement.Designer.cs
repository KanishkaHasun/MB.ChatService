// <auto-generated />
using System;
using ChatService.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChatService.Infrastructure.Data.Migrations
{
    [DbContext(typeof(MbDbContext))]
    [Migration("20250901074506_TeamManagement")]
    partial class TeamManagement
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChatService.Domain.Entities.Agent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DatetimeCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeniorityLevel")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Agents");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaa1"),
                            DatetimeCreated = new DateTimeOffset(new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            Name = "Lead 01",
                            SeniorityLevel = 4,
                            TeamId = 1,
                            Username = "lead01"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaa2"),
                            DatetimeCreated = new DateTimeOffset(new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            Name = "Mid 01",
                            SeniorityLevel = 2,
                            TeamId = 1,
                            Username = "mid01"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaa3"),
                            DatetimeCreated = new DateTimeOffset(new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            Name = "Mid 02",
                            SeniorityLevel = 2,
                            TeamId = 1,
                            Username = "mid02"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaa4"),
                            DatetimeCreated = new DateTimeOffset(new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            Name = "Junior 01",
                            SeniorityLevel = 1,
                            TeamId = 1,
                            Username = "junior01"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbb1"),
                            DatetimeCreated = new DateTimeOffset(new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            Name = "Senior 01",
                            SeniorityLevel = 3,
                            TeamId = 2,
                            Username = "senior01"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbb2"),
                            DatetimeCreated = new DateTimeOffset(new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            Name = "Mid 03",
                            SeniorityLevel = 2,
                            TeamId = 2,
                            Username = "mid03"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbb3"),
                            DatetimeCreated = new DateTimeOffset(new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            Name = "Junior 02",
                            SeniorityLevel = 1,
                            TeamId = 2,
                            Username = "junior02"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbb4"),
                            DatetimeCreated = new DateTimeOffset(new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            Name = "Junior 03",
                            SeniorityLevel = 1,
                            TeamId = 2,
                            Username = "junior03"
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-ccccccccccc1"),
                            DatetimeCreated = new DateTimeOffset(new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            Name = "Mid 04",
                            SeniorityLevel = 2,
                            TeamId = 3,
                            Username = "mid04"
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-ccccccccccc2"),
                            DatetimeCreated = new DateTimeOffset(new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            Name = "Mid 05",
                            SeniorityLevel = 2,
                            TeamId = 3,
                            Username = "mid05"
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-ddddddddddd1"),
                            DatetimeCreated = new DateTimeOffset(new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            Name = "Junior 04",
                            SeniorityLevel = 1,
                            TeamId = 4,
                            Username = "junior04"
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-ddddddddddd2"),
                            DatetimeCreated = new DateTimeOffset(new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            Name = "Junior 05",
                            SeniorityLevel = 1,
                            TeamId = 4,
                            Username = "junior05"
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-ddddddddddd3"),
                            DatetimeCreated = new DateTimeOffset(new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            Name = "Junior 06",
                            SeniorityLevel = 1,
                            TeamId = 4,
                            Username = "junior06"
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-ddddddddddd4"),
                            DatetimeCreated = new DateTimeOffset(new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            Name = "Junior 07",
                            SeniorityLevel = 1,
                            TeamId = 4,
                            Username = "junior07"
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-ddddddddddd5"),
                            DatetimeCreated = new DateTimeOffset(new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            Name = "Junior 08",
                            SeniorityLevel = 1,
                            TeamId = 4,
                            Username = "junior08"
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-ddddddddddd6"),
                            DatetimeCreated = new DateTimeOffset(new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            Name = "Junior 09",
                            SeniorityLevel = 1,
                            TeamId = 4,
                            Username = "junior09"
                        });
                });

            modelBuilder.Entity("ChatService.Domain.Entities.ChatSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssignedAgentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateTimeCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ValidFrom")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidFrom");

                    b.Property<DateTime>("ValidTo")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidTo");

                    b.HasKey("Id");

                    b.HasIndex("AssignedAgentId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatSessions", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("ChatSessionsHistory");
                                ttb
                                    .HasPeriodStart("ValidFrom")
                                    .HasColumnName("ValidFrom");
                                ttb
                                    .HasPeriodEnd("ValidTo")
                                    .HasColumnName("ValidTo");
                            }));
                });

            modelBuilder.Entity("ChatService.Domain.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Shift")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Team A",
                            Shift = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Team B",
                            Shift = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Team C",
                            Shift = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "Overflow Team",
                            Shift = 4
                        });
                });

            modelBuilder.Entity("ChatService.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DatetimeCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ChatService.Domain.Entities.Agent", b =>
                {
                    b.HasOne("ChatService.Domain.Entities.Team", "Team")
                        .WithMany("Agents")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ChatService.Domain.Entities.ChatSession", b =>
                {
                    b.HasOne("ChatService.Domain.Entities.Agent", "AssignedAgent")
                        .WithMany()
                        .HasForeignKey("AssignedAgentId");

                    b.HasOne("ChatService.Domain.Entities.User", "User")
                        .WithMany("Chats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedAgent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ChatService.Domain.Entities.Team", b =>
                {
                    b.Navigation("Agents");
                });

            modelBuilder.Entity("ChatService.Domain.Entities.User", b =>
                {
                    b.Navigation("Chats");
                });
#pragma warning restore 612, 618
        }
    }
}
